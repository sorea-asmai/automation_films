package com.backend.automationfilms;

import java.util.Collection;

import com.fasterxml.jackson.databind.JsonNode;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class MainController {
    @Autowired // This means to get the bean called FilmRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FilmRepository filmRepository;

    @Autowired
    private GenreRepository genreRepository;

    @Autowired
    private MovieRepository movieRepository;

    @Autowired
    private AwardCategoryRepository awardCategoryRepository;

    @Autowired
    private PersonRepository personRepository;

    @PostMapping(
      value = "/createNomination", consumes = "application/json", produces = "application/json")
    public @ResponseBody Nominated createNominated(@RequestBody JsonNode nomination, Model model) {
      //Getting movie and movie title from the posted json
      JsonNode movieObject = nomination.get("movie");
      JsonNode movieTitle = movieObject.get("title");
      JsonNode movieYear = movieObject.get("year");

      //getting data from omdb and mapping to the result variable
      String uri = "https://www.omdbapi.com/?apikey=940cab72&t="+movieTitle.asText()+"&y="+movieYear.asText();
      RestTemplate restTemplate = new RestTemplate();
      JsonNode result = restTemplate.getForObject(uri, JsonNode.class);
      //System.out.println(result);

      //Creating a movie object and populating with the contents of omdb
      Collection<Movie> movieCollection = movieRepository.findMovieByNameAndYear(movieTitle.asText(), movieYear.asInt());
      if(movieCollection.isEmpty()) {
        Movie movie = new Movie();
        movie.setName(result.get("Title").asText());
        movie.setDescription(result.get("Plot").asText());
        movie.setYear(result.get("Year").asInt());
        movie.setPoster(result.get("Poster").asText());
        movie.setImbdLink("https://www.imdb.com/title/"+result.get("imdbID").asText());
        movieRepository.save(movie);
        
        //Get the genres attributed to the movie from omdb and loop through them adding them to the genres
        //table if they dont exist yet as well as connecting the movie to its genres via the movie_genre table
        String genreString = result.get("Genre").asText();
        String genreArray[] = genreString.split(", ");
        for(int i=0; i<genreArray.length; i++) {
          Collection<Genre> genres = genreRepository.findGenreByName(genreArray[i]);
          if(genres.isEmpty()) {
            Genre genre = new Genre();
            genre.setName(genreArray[i]);
            genreRepository.save(genre);
          }
          //Looking again to get the genre if it was added
          genres = genreRepository.findGenreByName(genreArray[i]);
          Genre genre = genres.iterator().next();
          genre.getMovie().add(movie);
          movie.getGenre().add(genre);
          genreRepository.save(genre);
          movieRepository.save(movie);
        }
      }
      movieCollection = movieRepository.findMovieByNameAndYear(movieTitle.asText(), movieYear.asInt());
      Movie movie = movieCollection.iterator().next();

      //Get the award category information from the json object and find/create an award category from that.
      JsonNode awardObject = nomination.get("award_category");
      Collection<AwardCategory> awardCollection = awardCategoryRepository.findAwardCategoryByNameAndYear(awardObject.get("name").asText(), awardObject.get("year").asInt());
      if(awardCollection.isEmpty()) {
        AwardCategory awardCategory = new AwardCategory();
        awardCategory.setName(awardObject.get("name").asText());
        awardCategory.setYear(awardObject.get("year").asInt());
        awardCategoryRepository.save(awardCategory);
      }
      //Looking again to get the award category if it was added
      awardCollection = awardCategoryRepository.findAwardCategoryByName(awardObject.get("name").asText());
      AwardCategory award = awardCollection.iterator().next();

      //Get the person information from the json object and find/create an person from that.
      Person person = new Person();
      if(nomination.has("person")) {
        JsonNode personObject = nomination.get("person");
        Collection<Person> personCollection = personRepository.findPersonByName(personObject.get("fname").asText(), personObject.get("lname").asText());
        if(personCollection.isEmpty()) {
          person.setFirstName(personObject.get("fname").asText());
          person.setLastName(personObject.get("lname").asText());
          person.setRole(personObject.get("role").asText());
          personRepository.save(person);
        }
        //Looking again to get the person if it was added
        personCollection = personRepository.findPersonByName(personObject.get("fname").asText(), personObject.get("lname").asText());
        person = personCollection.iterator().next();
      }

      //Making the final nomination object
      Collection<Nominated> nominatedCollection = filmRepository.findNominationByAwardAndMovie(award, movie);
      if(nominatedCollection.isEmpty()) {
        Nominated nominated = new Nominated();
        nominated.setMovie(movie);
        nominated.setAwardCategory(award);
        if (nomination.has("person"))
          nominated.setPerson(person);
        nominated.setIs_winning(nomination.get("is_winning").asBoolean());
        filmRepository.save(nominated);
      }
      nominatedCollection = filmRepository.findNominationByAwardAndMovie(award, movie);
      Nominated nominated = nominatedCollection.iterator().next();

      // Used by html page for testing
      model.addAttribute("nominated", nominated);
      model.addAttribute("name", awardCategoryRepository.findAwardCategoryByName("Best Actor"));

      //Used to see data after inputed into database
      //Not important
      return nominated;
    } 

    @GetMapping(path="/all", produces = "application/json")
    public @ResponseBody Iterable<Nominated> getAllAwards() {
      // This returns a JSON or XML with the users
        return filmRepository.findAll();
    }

    // Example for search and drop down menu
    // Don't worry about this
    /*@PostMapping(value="/search")
    public SomeEnityData postMethodName(@RequestBody SomeEnityData entity) {
        //TODO: process POST request
        searchinput = searchinput
        searchcategory = searchcatory

        /movies?searchcategory=searchinput;
        
        return entity;
    }*/
    
}
