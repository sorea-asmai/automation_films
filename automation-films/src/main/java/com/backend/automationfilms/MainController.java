package com.backend.automationfilms;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with / (after Application path)
public class MainController {
    @Autowired // This means to get the bean called FilmRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FilmRepository filmRepository;

    @Autowired
    private GenreRepository genreRepository;

    @Autowired
    private MovieRepository movieRepository;

    @Autowired
    private AwardCategoryRepository awardCategoryRepository;

    @Autowired
    private PersonRepository personRepository;

    @PostMapping(
      value = "/createNomination", consumes = "application/json", produces = "application/json")
    public @ResponseBody Nominated createNominated(@RequestBody JsonNode nomination, Model model) {
      //Getting movie and movie title from the posted json
      JsonNode movieObject = nomination.get("movie");
      JsonNode movieTitle = movieObject.get("title");
      JsonNode movieYear = movieObject.get("year");

      //getting data from omdb and mapping to the result variable
      String uri = "https://www.omdbapi.com/?apikey=940cab72&t="+movieTitle.asText()+"&y="+movieYear.asText();
      RestTemplate restTemplate = new RestTemplate();
      JsonNode result = restTemplate.getForObject(uri, JsonNode.class);
      //System.out.println(result);

      //Creating a movie object and populating with the contents of omdb
      Collection<Movie> movieCollection = movieRepository.findMovieByNameAndYear(movieTitle.asText(), movieYear.asInt());
      if(movieCollection.isEmpty()) {
        Movie movie = new Movie();
        movie.setName(result.get("Title").asText());
        movie.setDescription(result.get("Plot").asText());
        movie.setYear(result.get("Year").asInt());
        movie.setPoster(result.get("Poster").asText());
        movie.setImbdLink("https://www.imdb.com/title/"+result.get("imdbID").asText());
        movieRepository.save(movie);
        
        //Get the genres attributed to the movie from omdb and loop through them adding them to the genres
        //table if they dont exist yet as well as connecting the movie to its genres via the movie_genre table
        String genreString = result.get("Genre").asText();
        String genreArray[] = genreString.split(", ");
        for(int i=0; i<genreArray.length; i++) {
          Collection<Genre> genres = genreRepository.findGenreByName(genreArray[i]);
          if(genres.isEmpty()) {
            Genre genre = new Genre();
            genre.setName(genreArray[i]);
            genreRepository.save(genre);
          }
          //Looking again to get the genre if it was added
          genres = genreRepository.findGenreByName(genreArray[i]);
          Genre genre = genres.iterator().next();
          genre.getMovie().add(movie);
          movie.getGenre().add(genre);
          genreRepository.save(genre);
          movieRepository.save(movie);
        }
      }
      movieCollection = movieRepository.findMovieByNameAndYear(movieTitle.asText(), movieYear.asInt());
      Movie movie = movieCollection.iterator().next();

      //Get the award category information from the json object and find/create an award category from that.
      JsonNode awardObject = nomination.get("award_category");
      Collection<AwardCategory> awardCollection = awardCategoryRepository.findAwardCategoryByNameAndYear(awardObject.get("name").asText(), awardObject.get("year").asInt());
      if(awardCollection.isEmpty()) {
        AwardCategory awardCategory = new AwardCategory();
        awardCategory.setName(awardObject.get("name").asText());
        awardCategory.setYear(awardObject.get("year").asInt());
        awardCategoryRepository.save(awardCategory);
      }
      //Looking again to get the award category if it was added
      awardCollection = awardCategoryRepository.findAwardCategoryByNameAndYear(awardObject.get("name").asText(), awardObject.get("year").asInt());
      AwardCategory award = awardCollection.iterator().next();

      //Get the person information from the json object and find/create an person from that.
      Person person = new Person();
      if(nomination.has("person")) {
        JsonNode personObject = nomination.get("person");
        Collection<Person> personCollection = personRepository.findPersonByName(personObject.get("fname").asText(), personObject.get("lname").asText());
        if(personCollection.isEmpty()) {
          person.setFirstName(personObject.get("fname").asText());
          person.setLastName(personObject.get("lname").asText());
          person.setRole(personObject.get("role").asText());
          personRepository.save(person);
        }
        //Looking again to get the person if it was added
        personCollection = personRepository.findPersonByName(personObject.get("fname").asText(), personObject.get("lname").asText());
        person = personCollection.iterator().next();
      }

      //Making the final nomination object
      Collection<Nominated> nominatedCollection = filmRepository.findNominationByAwardAndMovie(award, movie);
      if(nominatedCollection.isEmpty()) {
        Nominated nominated = new Nominated();
        nominated.setMovie(movie);
        nominated.setAwardCategory(award);
        if (nomination.has("person"))
          nominated.setPerson(person);
        nominated.setIs_winning(nomination.get("is_winning").asBoolean());
        filmRepository.save(nominated);
      }
      nominatedCollection = filmRepository.findNominationByAwardAndMovie(award, movie);
      Nominated nominated = nominatedCollection.iterator().next();

      // Used by html page for testing
      model.addAttribute("nominated", nominated);
      model.addAttribute("name", awardCategoryRepository.findAwardCategoryByName("Best Actor"));

      //Used to see data after inputed into database
      //Not important
      return nominated;
    }

    //Example
    @GetMapping(path="/movie/{movieName}/{movieYear}")
    public String movie(@PathVariable String movieName, @PathVariable int movieYear, Model model) {
      Movie movie = movieRepository.findMovieByNameAndYear(setSpaces(movieName), movieYear).iterator().next();
      model.addAttribute("movie", movie);
      return "movie.html";
    }

     //Example
     @GetMapping(path="/example")
     public String popularMovies(Model model) {
       Iterable<AwardCategory> awards = awardCategoryRepository.findAll();
       model.addAttribute("awards", awards); 
       return "PopularMoviesPage.html";
     }

    @GetMapping(path="/popular_movies")
    public String populaMovies(Model model) {
      Iterable<AwardCategory> awards = awardCategoryRepository.findAll();
      model.addAttribute("awards", awards); 
      return "jsPopularMovie.html";
    }

    @GetMapping(path="/contact_us")
    public String contactUs() { 
      return "ContactUs.html";
    }


    @GetMapping("/awards")
    @ResponseBody
    public List<AwardCategory> allAwards() {
      return (List<AwardCategory>)awardCategoryRepository.findAll();
    }

    @GetMapping("/awards/{id}")
    @ResponseBody
    public AwardCategory awardById(@PathVariable int id) {
      return awardCategoryRepository.findById(id).get();
    }

    @GetMapping("/awards/search")
    @ResponseBody
    public List<AwardCategory> searchAward(@RequestParam Map<String,String> allParams) {
      if(allParams.containsKey("id")) {
        try {
          return awardCategoryRepository.findAwardCategoryById(Integer.parseInt(allParams.get("id")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("name") && allParams.containsKey("year")) {
        try {
          return awardCategoryRepository.findAwardCategoryByNameAndYear(setSpaces(allParams.get("name")), Integer.parseInt(allParams.get("year")));
        } catch (NumberFormatException nfe) {
          return awardCategoryRepository.findAwardCategoryByName(setSpaces(allParams.get("name")));
        }
      } else if(allParams.containsKey("name")) {
        return awardCategoryRepository.findAwardCategoryByName(setSpaces(allParams.get("name")));
      } else if(allParams.containsKey("year")) {
        try {
          return awardCategoryRepository.findAwardCategoryByYear(Integer.parseInt(allParams.get("year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else {
        return (List<AwardCategory>)awardCategoryRepository.findAll();
      }
    }

    //Gets all movies in repo
    @GetMapping("/movies")
    @ResponseBody
    public List<Movie> allMovies() {
      return (List<Movie>)movieRepository.findAll();
    }

    //Gets movie by the inputed id
    @GetMapping("/movies/{id}")
    @ResponseBody
    public Movie movieById(@PathVariable int id) {
      return movieRepository.findById(id).get();
    }

    //Different searches through the movie repo
    @GetMapping("/movies/search")
    @ResponseBody
    public List<Movie> searchMovie(@RequestParam Map<String,String> allParams) {
      if(allParams.containsKey("id")) {
        try {
          return movieRepository.findMovieById(Integer.parseInt(allParams.get("id")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("name") && allParams.containsKey("year")) {
        try {
          return (List<Movie>)movieRepository.findMovieByNameAndYear(setSpaces(allParams.get("name")), Integer.parseInt(allParams.get("year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("name")) {
          return movieRepository.findMovieByName(setSpaces(allParams.get("name")));
      } else if(allParams.containsKey("year")) {
        try {
          return movieRepository.findMovieByYear(Integer.parseInt(allParams.get("year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("genre")) {
          return movieRepository.findMovieByGenre(allParams.get("genre"));
      } else {
        return (List<Movie>)movieRepository.findAll();
      }
    }

    //Gets movies by genre id
    @GetMapping("/genre/{id}")
    @ResponseBody 
    public Genre moviesByGenreId(@PathVariable int id) {
      return genreRepository.findById(id).get();
    }

    //Gets all nominations in repo
    @GetMapping("/nominations")
    @ResponseBody
    public List<Nominated> allNominations() {
      return (List<Nominated>)filmRepository.findAll();
    }

    //Gets nomination by inputed id
    @GetMapping("/nominations/{id}")
    @ResponseBody
    public Nominated nominationById(@PathVariable int id) {
      return filmRepository.findById(id).get();
    }

    @GetMapping("/nominations/category/{award}")
    @ResponseBody
    public List<Nominated> nominationByAwardName(@PathVariable String award) {
      return filmRepository.findNominationByAwardName(setSpaces(award));
    }

    @GetMapping("/nominations/category/year/{year}")
    @ResponseBody
    public List<Nominated> nominationByAwardYear(@PathVariable int year) {
      return filmRepository.findNominationByAwardYear(year);
    }

    @GetMapping("/nominations/category/{award}/{year}")
    @ResponseBody
    public List<Nominated> nominationByAwardNameAndYear(@PathVariable int year, @PathVariable String award) {
      return filmRepository.findNominationByAwardNameAndYear(setSpaces(award), year);
    }

    @GetMapping("/nominations/category/{award}/{year}/winner/{winning}")
    @ResponseBody
    public List<Nominated> nominationByAwardNameYearAndWinning(@PathVariable int year, @PathVariable String award, @PathVariable Boolean winning) {
      return filmRepository.findNominationByAwardNameYearAndWinning(setSpaces(award), year, winning);
    }

    @GetMapping("/nominations/movies/{movieName}")
    @ResponseBody
    public List<Nominated> nominationByMovieName(@PathVariable String movieName) {
      return filmRepository.findNominationByMovieName(setSpaces(movieName));
    }

    @GetMapping("/nominations/movies/year/{movieYear}")
    @ResponseBody
    public List<Nominated> nominationByMovieYear(@PathVariable int movieYear) {
      return filmRepository.findNominationByMovieYear(movieYear);
    }

    @GetMapping("/nominations/movies/{movieName}/{movieYear}")
    @ResponseBody
    public List<Nominated> nominationByMovieNameAndYear(@PathVariable int movieYear, @PathVariable String movieName) {
      return filmRepository.findNominationByMovieNameAndYear(setSpaces(movieName), movieYear);
    }

    @GetMapping("/nominations/person/{name}")
    @ResponseBody
    public List<Nominated> nominationByPerson(@PathVariable String name) {
      String nameArray[] = name.split("_");
      String fname, lname;
      if (nameArray.length > 2)
      {
        fname = nameArray[0] + " " + nameArray[1];
        lname = nameArray[2];
      }
      else {
        fname = nameArray[0];
        lname = nameArray[1];
      }
      return filmRepository.findNominationByPersonFnameAndLname(fname, lname);
    }

    //Different searches through the nomination repo
    @GetMapping("/nominations/search")
    @ResponseBody
    public List<Nominated> searchNominations(@RequestParam Map<String,String> allParams) {
      if(allParams.containsKey("id")) {
        try {
          return filmRepository.findNominationById(Integer.parseInt(allParams.get("id")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("movie_name") && allParams.containsKey("movie_year")) {
        try {
          return filmRepository.findNominationByMovieNameAndYear(setSpaces(allParams.get("movie_name")), Integer.parseInt(allParams.get("movie_year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("movie_name")) {
        return filmRepository.findNominationByMovieName(setSpaces(allParams.get("movie_name")));
      } else if(allParams.containsKey("movie_year")) {
        try {
          return filmRepository.findNominationByMovieYear(Integer.parseInt(allParams.get("movie_year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("award") && allParams.containsKey("award_year")) {
        try {
          return filmRepository.findNominationByAwardNameAndYear(setSpaces(allParams.get("award")), Integer.parseInt(allParams.get("award_year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("award")) {
        return filmRepository.findNominationByAwardName(setSpaces(allParams.get("award")));
      } else if(allParams.containsKey("award_year")) {
        try {
          return filmRepository.findNominationByAwardYear(Integer.parseInt(allParams.get("award_year")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("winner")) {
        return filmRepository.findNominationByWinning(Boolean.valueOf(allParams.get("winner")));
      } else if(allParams.containsKey("person_fname") && allParams.containsKey("person_lname")) {
        return filmRepository.findNominationByPersonFnameAndLname(setSpaces(allParams.get("person_fname")), allParams.get("person_lname"));
      } else if(allParams.containsKey("person_fname")) {
        return filmRepository.findNominationByPersonFname(setSpaces(allParams.get("person_fname")));
      } else if(allParams.containsKey("person_lname")) {
        return filmRepository.findNominationByPersonLname(allParams.get("person_lname"));
      } else {
        return (List<Nominated>)filmRepository.findAll();
      }
    }

    //Gets all people in repo
    @GetMapping("/persons")
    @ResponseBody
    public List<Person> allPersons() {
      return (List<Person>)personRepository.findAll();
    }

    //Gets person by id
    @GetMapping("/persons/{id}")
    @ResponseBody
    public Person personById(@PathVariable int id) {
      return personRepository.findById(id).get();
    }

    //Different searchs through the person repo
    @GetMapping("/persons/search")
    @ResponseBody
    public List<Person> searchPersons(@RequestParam Map<String,String> allParams) {
      if(allParams.containsKey("id")) {
        try {
          return (List<Person>)personRepository.findPersonById(Integer.parseInt(allParams.get("id")));
        } catch (NumberFormatException nfe) {
          return null;
        }
      } else if(allParams.containsKey("fname") && allParams.containsKey("lname")) {
        return (List<Person>)personRepository.findPersonByName(setSpaces(allParams.get("fname")), allParams.get("lname"));
      } else if(allParams.containsKey("fname")) {
        return personRepository.findPersonByFname(setSpaces(allParams.get("fname")));
      } else if(allParams.containsKey("lname")) {
        return personRepository.findPersonByLname(allParams.get("lname"));
      } else if(allParams.containsKey("role")) {
        return personRepository.findPersonByRole(allParams.get("role"));
      } else {
        return (List<Person>)personRepository.findAll();
      }
    }

    //Used to remove underscores and add spaces
    public String setSpaces(String s) {
      String sArray[] = s.split("_");
      s = "";
      for(int i=0; i<sArray.length; i++) {
        s += sArray[i] + " ";
      }
      s = s.trim();
      
      return s;
    }

    // Example for search and drop down menu
    // Don't worry about this
    /*@PostMapping(value="/search")
    public SomeEnityData postMethodName(@RequestBody SomeEnityData entity) {
        //TODO: process POST request
        searchinput = searchinput
        searchcategory = searchcatory

        /movies?searchcategory=searchinput;
        
        return entity;
    }*/
}